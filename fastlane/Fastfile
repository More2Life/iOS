# Customise this file, documentation can be found here:
# https://github.com/fastlane/fastlane/tree/master/fastlane/docs
# All available actions: https://docs.fastlane.tools/actions
# can also be listed using the `fastlane actions` command

# Change the syntax highlighting to Ruby
# All lines starting with a # are ignored when running `fastlane`

# If you want to automatically update fastlane if a new version is available:
# update_fastlane

# This is the minimum version number required.
# Update this, if you use features of a newer version
fastlane_version "2.49.0"

default_platform :ios

platform :ios do
  before_all do
    ENV["SLACK_URL"] = "https://hooks.slack.com/services/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"
    ENV["FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD"] = "eonu-amob-vcsp-fscz"
  end

  desc "Runs all the tests"
  lane :test do
    scan
  end

  desc "Submit a new Beta Build to Apple TestFlight"
  desc "This will also make sure the profile is up to date"
  lane :beta do
    # match(type: "appstore") # more information: https://codesigning.guide
    
    version = get_version_number(xcodeproj: "More2Life.xcodeproj", target: "More2Life")
    testflight_build_number = latest_testflight_build_number({ version: version })

    updateInfoPlists(version: version, build: testflight_build_number + 1)
    
    gym(scheme: "More2Life") # Build your app - more options available
    pilot

    slack(message: "New Testflight build ready for testing!", channel: "#build-updates")
  end

  desc "Deploy a new version to the App Store"
  lane :release do
    # match(type: "appstore")
    # snapshot
    gym(scheme: "More2Life") # Build your app - more options available
    deliver(force: true)
    # frameit
  end
  
  desc "Updates all the plists in the app to have the same version and build"
  lane :updateInfoPlists do |options|
    # Get App Version
    version = options[:version]
    
    if version == nil
      UI.important("Please check iTunesConnect and make sure the build number is higher than the lastest build for the version you specify.")
      
      if UI.confirm("View list of builds from TestFlight?")
        sh("fastlane pilot builds") # prints a list of builds up on TestFlight
      end
      
      version = UI.input("What version should this be released as?")
    end
    
    # Get build number
    build = options[:build]
    
    if build == nil
      build = UI.input("What build number should this be released as?")
    end
    
    infoPlistPaths = [
      "More2Life/Info.plist",
      "StickerPackExtension/Info.plist",
      "NotificationServiceExtension/Info.plist"
    ]
    
    infoPlistPaths.each do |infoPlistPath|
      # Update the Info.plist for the targets
      update_info_plist(
        plist_path: infoPlistPath,
        block: lambda { |plist|
            plist['CFBundleShortVersionString'] = "#{version}"
            plist['CFBundleVersion'] = "#{build}"
          }
      )
    end
  end
  
  desc "Generates certificates and provisioning profiles"
  lane :generateProvisioning do |options|
    
    type = options[:type]
    if type == nil
      type = UI.select("What type of provisioning do you want to generate?", ["development", "appstore", "all"])
    end

    UI.header "Step: üîë  Provisioning => " + type
    
    if UI.confirm ("Are you sure you want to generate new Development certificates and provisioning profiles? This will cause the whole team to have to re-download Development certificates and profiles before they can build on device?")
      if type == "all"
        provisioning(type: "development")
        provisioning(type: "appstore")
      else 
        provisioning(type: type)
      end
    else
      UI.error "Generation of " + type + " certs and profiles has been cancelled."
    end
    
  end
  
  desc "Downloads certificates and provisioning profiles"
  lane :downloadProvisioning do |options|
    
    type = options[:type]
    if type == nil
      UI.message "To skip having to select a type, provide the type by calling `fastlane downloadProvisioning type:<TYPE>"
      type = UI.select("What type of provisioning do you want to download?", ["development", "appstore", "all"])
    end
    
    if type == "all"
      fetchProvisioning(type: "development")
      fetchProvisioning(type: "appstore")
    else
      fetchProvisioning(type: type)
    end
  end

  desc "Create provisioning profiles"
  private_lane :provisioning do |options|    
    match(type: options[:type], app_identifier: "com.coachkalanifoundation.More2Life", force_for_new_devices: true)
    match(type: options[:type], app_identifier: "com.coachkalanifoundation.More2Life.StickerPackExtension", force_for_new_devices: true)
    match(type: options[:type], app_identifier: "com.coachkalanifoundation.More2Life.NotificationServiceExtension", force_for_new_devices: true)
  end

  desc "üêï Fetch provisioning üêï"
  private_lane :fetchProvisioning do |options|
    match(type: options[:type], app_identifier: "com.coachkalanifoundation.More2Life", readonly: true)
    match(type: options[:type], app_identifier: "com.coachkalanifoundation.More2Life.StickerPackExtension", readonly: true)
    match(type: options[:type], app_identifier: "com.coachkalanifoundation.More2Life.NotificationServiceExtension", readonly: true)
  end

  # You can define as many lanes as you want

  after_all do |lane|
    # This block is called, only if the executed lane was successful

    # slack(
    #   message: "Successfully deployed new App Update."
    # )
  end

  error do |lane, exception|
    # slack(
    #   message: exception.message,
    #   success: false
    # )
  end
end


# More information about multiple platforms in fastlane: https://github.com/fastlane/fastlane/blob/master/fastlane/docs/Platforms.md
# All available actions: https://docs.fastlane.tools/actions

# fastlane reports which actions are used. No personal data is recorded. 
# Learn more at https://github.com/fastlane/fastlane#metrics
